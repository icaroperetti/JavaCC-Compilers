options 
{
 DEBUG_PARSER=true;
 DEBUG_TOKEN_MANAGER=true;
 static = false; 
} 
PARSER_BEGIN(Work) 
 
import java.io.FileInputStream; 
import java.io.File; 
import java.io.IOException; 
public class Work {
 	public static void main(String args []) throws ParseException {
	 	try {
	 		System.out.println("Lendo arquivo fonte...");
	 		FileInputStream fis = new FileInputStream(new File("..//Work//src//fonte.txt")); 
	 		Work parser = new Work(fis); 
	 		parser.Start();
	 		System.out.println("Arquivo fonte processado corretamente!");
		} catch (IOException e) {
			System.out.println("Falha ao abrir arquivo fonte.");
	 		System.exit(0);
	 	}
	}
}

PARSER_END(Work) 
SKIP : { " "| "\t" | "\n" | "\r" }


TOKEN:
{
  < COMMENT: "//" (~["\n" , "\r"])* ("\n" | "\r" | "\r\n" | "") > 
}


TOKEN :{ < EOL : ";" >}


TOKEN: { < INCREMENTO  : (< MAIS >| < MENOS >) > | <  #MAIS:"++" > | < #MENOS:"--" > }

									
TOKEN: { < #LETTER:["a"-"z","A"-"Z"] > | < #DIGIT: (["0"-"9"])+ | (["0"-"9"]) + "." (["0"-"9"])+ >}

TOKEN : { < NUMEROS : (["0"-"9"])+"."(["0"-"9"])+ > }

TOKEN:
{
 
	< TIPO : (< INT > | < STRING > | <  BYTE > | <  FLOAT > | < DOUBLE >|< BOOLEAN >| < CHAR >) >|
	< #INT:"int" > |
	< #STRING : "String" > |
	< #BYTE: "byte" > |
	< #FLOAT :"float" > |
	< #DOUBLE: "double" >|
	< #BOOLEAN:"boolean" >|
	< #CHAR : "char" >
}


TOKEN: { < OPER_ARITMETICO :("+" | "-" |"*"|"/" )>}

TOKEN: { < OPER_RELACIONAL :(">" | "<" |"=="|"!=" )>}


TOKEN: { < FUNCTION: "function" > }


TOKEN: {< BOOL:(< TRUE >|< FALSE >) > | < #TRUE:"true" > | < #FALSE:"false" >}


TOKEN : { < ABRE_PARENTESES : "(" >  }
TOKEN : { < FECHA_PARENTESES : ")" >  }


TOKEN : { < ABRE_CHAVES : "{" >  }
TOKEN : { < FECHA_CHAVES : "}" >  }


TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < ELSEIF : "elseif" > }

		
TOKEN: { < VALUES: < DIGIT >(< DIGIT >)* | "\""< LETTER >(< LETTER >|< DIGIT >|"_")*"\"" > } 


TOKEN : { < ATRIBUICAO : "=" > }


TOKEN : { < VIRGULA : "," > }

TOKEN: { < SWITCH: "switch" > }
TOKEN: { < CASE:"case" > }
TOKEN: { < DOIS_PONTOS: ":" > }
TOKEN: { < BREAK:"break" > }

TOKEN: { < WHILE: "while" > }
TOKEN: { < DO:"do" > }


TOKEN: { < LITERALS: < LETTER >(< LETTER >|< DIGIT >|"_")* > }

void Start() : {} { (COMANDOS()) < EOF > }



void  DECLARAR_VARIAVEL(): { } { (< TIPO ><LITERALS >) }

void ATRIBUICAO_VARIAVEL(): { } { < VALUES >|< NUMEROS >|< LITERALS > | < BOOL > }

void IDENTIFICADOR(): { }
{
    ( DECLARAR_VARIAVEL() ( < VIRGULA > ( < LITERALS > | < VIRGULA > < LITERALS > )+ | < ATRIBUICAO >ATRIBUICAO_VARIAVEL() ) * < EOL > )
}



void COMANDOS():
{}
{
  (WHILE() |  EXP_ARITMETICA() | IDENTIFICADOR()| IF() | < COMMENT > | FUNCAO ()|DO_WHILE()|SWITCH_CASE())+
}


void CONDICAO():
{ }
{
  ( <ABRE_PARENTESES >EXP_BOOL() < FECHA_PARENTESES ><ABRE_CHAVES >COMANDOS()< FECHA_CHAVES >)*
}

void IF():
{ }
{
  < IF >CONDICAO() (< ELSEIF > CONDICAO())* (< ELSE ><ABRE_CHAVES >COMANDOS()< FECHA_CHAVES >)*
}

void WHILE():
{}
{
    < WHILE ><ABRE_PARENTESES >EXP_BOOL() < FECHA_PARENTESES > < ABRE_CHAVES >(COMANDOS())* < FECHA_CHAVES >		
}

void FUNCAO ():
{ }
{
  < FUNCTION ><ABRE_PARENTESES >(PARAMETROS())*< FECHA_PARENTESES > <ABRE_CHAVES >(COMANDOS())*< FECHA_CHAVES >
}

void PARAMETROS ():
{ }
{
  DECLARAR_VARIAVEL() (< VIRGULA > DECLARAR_VARIAVEL())*
}


void EXP_BOOL():
{ }
{
 ( ( < VALUES > | < NUMEROS > | < LITERALS >  ) < OPER_RELACIONAL > ( < VALUES > | < NUMEROS > | < LITERALS > ) )
}

void EXP_ARITMETICA():
{}
{
  ( < LITERALS >(< INCREMENTO >|< ATRIBUICAO >( < VALUES > | < NUMEROS > | < LITERALS >  )) (< OPER_ARITMETICO > ( < VALUES > | < NUMEROS > | < LITERALS > ))* < EOL > )
}

void ABRE_ESCOPO():
{ }
{
  < ABRE_CHAVES >(COMANDOS())< FECHA_CHAVES >
}

void DO_WHILE():
{ }
{
  < DO >ABRE_ESCOPO()< WHILE ><ABRE_PARENTESES >EXP_BOOL()< FECHA_PARENTESES >
}

void CASE():
{ }
{
  < CASE > (<  VALUES > | < LITERALS >)< DOIS_PONTOS >COMANDOS()< BREAK ><EOL >
}
  

void SWITCH_CASE():
{ }
{
  < SWITCH ><ABRE_PARENTESES >< LITERALS ><FECHA_PARENTESES ><ABRE_CHAVES >(CASE())*< FECHA_CHAVES >
}

