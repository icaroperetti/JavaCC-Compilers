options 
{
 DEBUG_PARSER=true;
 static = false; 
} 
PARSER_BEGIN(Work) 
 
import java.io.FileInputStream; 
import java.io.File; 
import java.io.IOException; 
public class Work 
{
 public static void main(String args []) throws ParseException 
 {
 try 
 {
 System.out.println("Lendo arquivo fonte...");
 FileInputStream fis = new FileInputStream(new File("..//Work//src//fonte.txt")); 
 Work parser = new Work(fis); 
 parser.Start();
 System.out.println("Arquivo fonte processado corretamente!");
 }
 catch (IOException e) 
 {
 System.out.println("Falha ao abrir arquivo fonte.");
 System.exit(0);
 }
 }
}
PARSER_END(Work) 
SKIP : { " "| "\t" | "\n" | "\r" }



//a linguagem ter� somente comentarios de uma linha
TOKEN:
{
  //Tudo menos nova linha e enter
  < COMMENT: "//" (~["\n" , "\r"])* ("\n" | "\r" | "\r\n" | "") > 
}


TOKEN :{ < EOL : ";" >}


TOKEN: { < INCREMENTO  : (< MAIS >| < MENOS >) > | <  #MAIS:"++" > | < #MENOS:"--" > }

										
TOKEN: { < #LETTER:["a"-"z","A"-"Z"] > | < #DIGIT: (["0"-"9"])+ | (["0"-"9"]) + "." (["0"-"9"])+ >}

TOKEN : { < NUMEROS : (["0"-"9"])+","(["0"-"9"])+ > }

TOKEN:
{
 
	< TIPO : (< INT > | < STRING > | <  BYTE > | <  FLOAT > | < DOUBLE >|< BOOLEAN >| < CHAR >) >|
	< #INT:"int" > |
	< #STRING : "String" > |
	< #BYTE: "byte" > |
	< #FLOAT :"float" > |
	< #DOUBLE: "double" >|
	< #BOOLEAN:"boolean" >|
	< #CHAR : "char" >
}


TOKEN: { < LITERALS: < LETTER >(< LETTER >|< DIGIT >|"_")* > }


TOKEN: { < OPER_ARITMETICO :("+" | "-" |"*"|"/" )>}

TOKEN: { < OPER_RELACIONAL :(">" | "<" |"=="|"!=" )>}


TOKEN: { < FUNCTION: "function" > }


TOKEN: {< BOOL:(< TRUE >|< FALSE >) > | < #TRUE:"true" > | < #FALSE:"false" >}


TOKEN : { < ABRE_PARENTESES : "(" >  }
TOKEN : { < FECHA_PARENTESES : ")" >  }


TOKEN : { < ABRE_CHAVES : "{" >  }
TOKEN : { < FECHA_CHAVES : "}" >  }


TOKEN : { < IF : "if(" > }


TOKEN : { < ELSE : "else" > }
TOKEN : { < ELSEIF : "elseif" > }

		//numericos								//String entre aspas
TOKEN: { < VALUES: < DIGIT >(< DIGIT >)* | "\""< LETTER >(< LETTER >|< DIGIT >|"_")*"\"" > } 


TOKEN : { < ATRIBUICAO : "=" > }


TOKEN : { < VIRGULA : "," > }



TOKEN: { < WHILE: "while(" > }


void Start() : {} { (INSTRUCOES()) < EOF > }

void INSTRUCOES():
{ }
{
  (IDENTIFICADOR() | < COMMENT > | COMANDO())*
}

//---------------DECLARAR V�RIAVEIS ------------------------------------------------
void  DECLARAR_VARIAVEL(): { } { (< LITERALS > | < VIRGULA > DECLARAR_VARIAVEL())+ }

void ATRIBUICAO_VARIAVEL(): { } { < VALUES >(< VIRGULA > < LITERALS > < ATRIBUICAO > < VALUES >)* }

void IDENTIFICADOR(): { }
{
   < TIPO >< LITERALS >(< VIRGULA > DECLARAR_VARIAVEL() | < ATRIBUICAO > ATRIBUICAO_VARIAVEL() )*< EOL >
}


//-------WHILE----------------------------------------------------------------------------
void COMANDO():
{}
{
  (WHILE() | ATRIBUIR() | IDENTIFICADOR())+
}

void WHILE():
{}
{
    < WHILE >EXP_BOOL() < FECHA_PARENTESES > < ABRE_CHAVES >(COMANDO())* < FECHA_CHAVES >		
}

void ATRIBUIR():
{ }
{
  (< LITERALS > < ATRIBUICAO >EXP_ARITMETICA()< EOL >)+
}

void EXP_BOOL():
{ }
{
 ( ( < VALUES > | < NUMEROS > | < LITERALS >  ) < OPER_RELACIONAL > ( < VALUES > | < NUMEROS > | < LITERALS > ) )
}

void EXP_ARITMETICA():
{}
{
  ( ( < VALUES > | < NUMEROS > | < LITERALS >  ) < OPER_ARITMETICO > ( < VALUES > | < NUMEROS > | < LITERALS > ) )
}



/*
void NUMERO():
{}
{
  < VALUES >(NUMERO())*
}
*/

/*
void VARIAVEL():
{ }
{
  < LITERALS >(VARIAVEL())*
}
*/
